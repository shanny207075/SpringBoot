package com.example.linebot.controller;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

import javax.net.ssl.HttpsURLConnection;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.linebot.model.Event;
import com.example.linebot.model.EventWrapper;

@RestController
@RequestMapping("/linebot")
public class LineBotController {

	private String accessToken = "4QDv4/STexJ3rpSo7103fU4BmrpkRMEWLbZLinBrKr/96+gI5AJzW6GF8L/kk/HUxP4U1C2sotycuUhnuOesXmgj/M/UqSqeTe1Bvdlv73/FKkb34i4aYLE0bN9n1ZMLvdDDLcTv7rSc74z+s9CA6QdB04t89/1O/w1cDnyilFU=";

	private final Logger log = Logger.getLogger("tesglog");
	
    // 打招呼 
	private List<String> GREETINGS = Arrays.asList("hi", "hello", "你好", "哈囉", "安安", "嗨", "您好");
	// 回復打招呼
	private List<String> GREETINGS_RESPONSE = Arrays.asList("你好呀(^o^)/", "哈囉～ヾ(・ω・ｏ)", "安安呀( ･ω･)ﾉ", "嗨～\\( ﾟ▽ﾟ)/");
	// 中午吃甚麼
	private List<String> EATING = Arrays.asList("晚餐","晚上","中餐","中午","吃");

	@RequestMapping(value = "/test")
	public String justTest() {
		log.info("@@@ justTest  @@@");
		return "@@@ justTest  @@@";
	}

	@RequestMapping(value = "/callback")
	public void callback(@RequestBody EventWrapper events) {
		log.setLevel(Level.ALL);
		for (Event event : events.getEvents()) {
			switch (event.getType()) {
			case "message": // 當event為message時進入此case執行，其他event(如follow、unfollow、leave等)的case在此省略，您可自己增加
				log.info("@@@ This is a message event!  @@@");
				switch (event.getMessage().getType()) {

				case "text": // 當message type為text時，進入此case執行，目前子是將使用者傳來的文字訊息在其前加上echo字串後，回傳給使用者
					sendResponseMessages(event.getReplyToken(), event.getMessage().getText());
					break;
				case "image":// 當message type為image時，進入此case執行，
					break;
				case "audio":// 當message type為audio時，進入此case執行，
					break;
				case "video":// 當message type為video時，進入此case執行，
					break;
				case "file":// 當message type為file時，進入此case執行，
					break;
				case "sticker":// 當message type為sticker時，進入此case執行，
					break;
				case "location":// 當message type為location時，進入此case執行，
					break;
				}

				break;
			}
		}
	}

	private void sendResponseMessages(String replyToken, String message) {
		// 回傳的response body json 格式訊息
		String rspMessage = buildMessage(replyToken, message);
		log.info("## message ##" + rspMessage);

		// 建立連線
		HttpsURLConnection con = createConnection();

		if (con == null) {
			return;
		}

		// 將「回傳訊息」資料輸出
		writeOutPut(con, rspMessage);

		// 顯示回傳結果
		showResult(con);

	}

	/**
	 * 建立連線
	 */
	private HttpsURLConnection createConnection() {
		HttpsURLConnection con = null;
		try {

			// 回傳的網址
			URL myurl = new URL("https://api.line.me/v2/bot/message/reply");
			// 使用HttpsURLConnection建立https連線
			con = (HttpsURLConnection) myurl.openConnection();
			// 設定post方法
			con.setRequestMethod("POST");
			// 設定Content-Type為json
			con.setRequestProperty("Content-Type", "application/json; charset=utf-8");
			// 設定Authorization
			con.setRequestProperty("Authorization", "Bearer " + this.accessToken);
			// 允許輸入流，即允許下載
			con.setDoOutput(true);
			// 允許輸出流，即允許上傳
			con.setDoInput(true);

		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return con;
	}

	/**
	 * 將「回傳訊息」資料輸出
	 */
	private void writeOutPut(HttpsURLConnection con, String messagne) {

		try {
			// 開啟HttpsURLConnection的連線
			DataOutputStream output = new DataOutputStream(con.getOutputStream());

			// 回傳訊息編碼為utf-8
			output.write(messagne.getBytes(Charset.forName("utf-8")));
			output.close();
		}
		catch (IOException e) {
			e.printStackTrace();
		}

	}

	/**
	 * 顯示回傳結果
	 */
	private void showResult(HttpsURLConnection con) {

		try {
			int rspCode = con.getResponseCode();
			// 顯示回傳的結果，若code為200代表回傳成功
			log.info("Resp Code:" + rspCode + "; Resp Message:" + con.getResponseMessage());
			printErrorMessage(rspCode, con.getErrorStream());
		}
		catch (Exception e) {
			e.printStackTrace();
		}

	}

	/**
	 * 組回傳的response body json 格式訊息
	 */
	private String buildMessage(String replyToken, String message) {
		String responseMsg = "";
		Boolean hasMassge = true;
		int random = new Random().nextInt(GREETINGS_RESPONSE.size());
		for (String s : GREETINGS) {
			if (message.toLowerCase().indexOf(s) > -1) {
				responseMsg = GREETINGS_RESPONSE.get(random);
				break;
			}
			else {
				responseMsg = "不好意思，我不太了解「"+message+"」的意思...(´-ω-`)";
			}
		}

		return "{\"replyToken\":\"" + replyToken + "\",\"messages\":[{\"type\":\"text\",\"text\":\"" + responseMsg + "\"}]}";
	}

	/**
	 * 顯示回傳的錯誤訊息
	 * 
	 * @throws Exception
	 */
	private void printErrorMessage(int rspCode, InputStream errorStream) throws Exception {
		if (rspCode != 200) {
			String response = readStreamConvertToString(errorStream);
			log.info("### response  ### : " + response);
		}
	}

	/**
	 * 將 InputStream 轉換為字串
	 */
	private String readStreamConvertToString(InputStream stream) throws Exception {
		InputStream inputStream = new BufferedInputStream(stream);
		StringBuilder builder = new StringBuilder();
		try (BufferedReader in = new BufferedReader(new InputStreamReader(inputStream))) {
			String line;
			while ((line = in.readLine()) != null) {
				builder.append(line); // + "\r\n"(no need, json has no line breaks!)
			}
			in.close();
		}
		return builder.toString();
	}
}
